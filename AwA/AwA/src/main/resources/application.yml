spring:
  datasource:
    url: jdbc:mariadb://i7c101.p.ssafy.io/AwA
    username: AwA
    password: tpwlslrnldudnj!#%
    driver-class-name: org.mariadb.jdbc.Driver
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 654989514571-ji9os6ujroj61ajmf3mviched2h7i3jh.apps.googleusercontent.com
            client-secret: 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
            scope:
              - profile
              - email
          naver:
            client-id: 3IlTyXUB0h2gwt4O1Lhv
            client-secret: 5ariPPNgVF
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}'
            authorization-grant-type: authorization_code
            client-name: Naver
            scope:
              - name
              - email
          kakao:
            authorization-grant-type: authorization_code
            client-id: 6aedbfc39ab1738bda8e5bbf952587ed
            client-secret: zVzwaD3ISM71jWvqc2uasloliMlbjHf5
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            client-name: Kakao
            client-authentication-method: POST
            scope:
              - profile_nickname
              - account_email
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id


    #spring:
    #  datasource:
    #    url: jdbc:mariadb://awa.cwesz7tzcefm.ap-northeast-2.rds.amazonaws.com/AwA
    #    username: ssafy
    #    password: tpwlslrnldudnj!#%
    #    driver-class-name: org.mariadb.jdbc.Driver

    #main:
    #allow-circular-references: true 서로 참조하는 무한루프에서 빠져나오기 위한것이였는데 뭐였더라.. userService내에서 jwtTokenProvider쓰고 JwtTokenProvider에서 userService또불러서 썼는데 걍 userRepository 쓰는걸로 해결
    #무한루프는 양방향 일 때 컨트롤러에서 엔티티를 반환하는 경우 문제 가 생길 수 있다.
    port:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher


  jpa:
    hibernate:
      ddl-auto: update
      properties:
        hibernate:
          #show_sql: true
          format_sql: true
    #generate-ddl: true

  mail:
    host: smtp.gmail.com
    port: 587
    username: kimsejin159@gmail.com
    password: wcoonqgxuqzfloqg
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true

#  security:
#    oauth2:
#      client:
#        registration:
#          kakao :
#            client-id: afeb09d9ad8efdab174acbe07ab6e8d8
#            redirect-uri: http://localhost:8080/auth/kakao
#            authorization-grant-type: authorization_code
#            client-authentication-method: POST
#            client-name: Kakao
#            scope:
#              - profile_nickname
#              - account_email
#        provider:
#          kakao:
#            authorization-uri: https://kauth.kakao.com/oauth/authorize
#            token-uri: https://kauth.kakao.com/oauth/token
#            user-info-uri: https://kapi.kakao.com/v2/user/me
#            user-name-attribute: id


logging:
  level:
    org.hibernate.sql: debug
    org.hibernate.type: trace

server:
  port: 8081
  ssl:
    key-store: classpath:keystore.p12
    key-store-type: PKCS12
    key-store-password: tpwlslrnldudnj!#%
  http2:
    enabled: true

#  ssl :
#    enabled : true
#    key-alias: AwAKey
#    key-store: AwAKey.pkcs12
#    key-store-password: tpwlslrnldudnj!#%
#    key-password: tpwlslrnldudnj!#%
#    trust-store: AwAstroe.pkcs12
#    trust-store-password: tpwlslrnldudnj!#%



